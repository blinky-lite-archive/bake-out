[
    {
        "id": "5f562f66.a301e",
        "type": "tab",
        "label": "device-message-adapter",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e5f2f431.5be658",
        "type": "mqtt-broker",
        "z": "",
        "name": "blinky-lite-controlbox",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "5ef609e6.7c6038",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Get Temperature",
        "func": "var UpperByte = msg.payload[0];\nvar LowerByte = msg.payload[1];\nif (UpperByte == LowerByte) return null;\nif (UpperByte > 127) UpperByte = UpperByte - 256;\n//if (LowerByte > 127) LowerByte = LowerByte - 256;\nvar temperature = (UpperByte * 16 + LowerByte / 16);\ntemperature  = Math.round(temperature * 100.0) / 100.0;\nflow.set('temperature',temperature);\nreturn {topic:flow.get('archiverTopic') + 'temperature/reading', payload:{\"type\":\"scalar\",\"value\":temperature}}",
        "outputs": 1,
        "noerr": 0,
        "x": 510,
        "y": 780,
        "wires": [
            [
                "70f9dc7a.b15bc4",
                "dd277d43.3e001"
            ]
        ]
    },
    {
        "id": "72d86190.ad104",
        "type": "rpi-gpio out",
        "z": "5f562f66.a301e",
        "name": "",
        "pin": "36",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 640,
        "y": 240,
        "wires": []
    },
    {
        "id": "13293ecc.6d3cc1",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 240,
        "wires": [
            [
                "72d86190.ad104",
                "e17bc3ae.1cb01"
            ]
        ]
    },
    {
        "id": "b3c46ace.05a698",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 300,
        "wires": [
            [
                "72d86190.ad104",
                "e17bc3ae.1cb01"
            ]
        ]
    },
    {
        "id": "e17bc3ae.1cb01",
        "type": "rpi-gpio out",
        "z": "5f562f66.a301e",
        "name": "",
        "pin": "11",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 640,
        "y": 300,
        "wires": []
    },
    {
        "id": "b6e24967.126458",
        "type": "rpi-gpio out",
        "z": "5f562f66.a301e",
        "name": "",
        "pin": "40",
        "set": true,
        "level": "1",
        "freq": "",
        "out": "out",
        "x": 340,
        "y": 1020,
        "wires": []
    },
    {
        "id": "5d608587.8d04ac",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 1000,
        "wires": [
            [
                "b6e24967.126458"
            ]
        ]
    },
    {
        "id": "89775c7.23026a",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "b6e24967.126458"
            ]
        ]
    },
    {
        "id": "773faf09.3c713",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "x": 130,
        "y": 780,
        "wires": [
            [
                "e1829849.870498"
            ]
        ]
    },
    {
        "id": "70f9dc7a.b15bc4",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Toggle Blue LED",
        "func": "var toggle = context.get('toggle');\nif (toggle == undefined) toggle = true;\ntoggle = !toggle;\ncontext.set('toggle',toggle);\nreturn {topic:'toggle',payload:toggle};",
        "outputs": 1,
        "noerr": 0,
        "x": 1070,
        "y": 780,
        "wires": [
            [
                "84295d13.2c929"
            ]
        ]
    },
    {
        "id": "84295d13.2c929",
        "type": "rpi-gpio out",
        "z": "5f562f66.a301e",
        "name": "",
        "pin": "15",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1240,
        "y": 780,
        "wires": []
    },
    {
        "id": "aa91a246.75cc6",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "",
        "payload": "ARCHIVERTOPIC",
        "payloadType": "env",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 130,
        "y": 20,
        "wires": [
            [
                "c6313d12.de68b"
            ]
        ]
    },
    {
        "id": "c6313d12.de68b",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Set Archiver Topic",
        "func": "flow.set('archiverTopic',msg.payload)\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "x": 290,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "70102039.f101f",
        "type": "mqtt in",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "archiver/blinky-lite/demo/dma/+/bake-out/+/setting",
        "qos": "0",
        "datatype": "auto",
        "broker": "e5f2f431.5be658",
        "x": 240,
        "y": 140,
        "wires": [
            [
                "b3264e0a.5aea"
            ]
        ]
    },
    {
        "id": "b3264e0a.5aea",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 500,
        "y": 140,
        "wires": [
            [
                "e544e64d.008ea8"
            ]
        ]
    },
    {
        "id": "e544e64d.008ea8",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Parse Setting",
        "func": "var archiverTopic = flow.get('archiverTopic').split('/');\nvar inputTopic =  msg.topic.split('/');\nif (archiverTopic[4] != inputTopic[4]) return null;\nvar settingsReadback = flow.get('settingsReadback');\nsettingsReadback[inputTopic[6]] = msg.payload.value;\nreturn {topic: inputTopic[6], payload:settingsReadback};",
        "outputs": 1,
        "noerr": 0,
        "x": 650,
        "y": 140,
        "wires": [
            [
                "c5c68b41.de2288",
                "fa84e555.4dd318",
                "14d4dc24.b47e94"
            ]
        ]
    },
    {
        "id": "dd277d43.3e001",
        "type": "mqtt out",
        "z": "5f562f66.a301e",
        "name": "blinky-lite-controlbox",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "broker": "e5f2f431.5be658",
        "x": 1100,
        "y": 360,
        "wires": []
    },
    {
        "id": "e1829849.870498",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Read MCP9600",
        "func": "var i2c=global.get(\"i2c\");\nvar i2c1 = null;\ni2c1 = i2c.openSync(3);\ni2c1.i2cWriteSync(102, 1, new Buffer([0xc0]));\nvar word = i2c1.readWordSync(102, 0);\ni2c1.closeSync();\nvar readBuffer = new Buffer([(word & 0x00ff), (word & 0xff00) >> 8]);\n\nreturn {topic:'readword',payload:readBuffer};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 780,
        "wires": [
            [
                "5ef609e6.7c6038"
            ]
        ]
    },
    {
        "id": "c5c68b41.de2288",
        "type": "file",
        "z": "5f562f66.a301e",
        "name": "",
        "filename": "bake-settings.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 850,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1161fa41.8d37a6",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Change init Settings",
        "func": "return {topic:'test',payload:{\"state\":0, \"reg-temp\":0,\"reg-window\":0,\"ramp-up-time\":0,\"ramp-down-time\":0}};",
        "outputs": 1,
        "noerr": 0,
        "x": 380,
        "y": 80,
        "wires": [
            [
                "c5c68b41.de2288"
            ]
        ]
    },
    {
        "id": "2ef0d877.a9ed18",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "Change Init settings",
        "topic": "",
        "payload": "314",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 170,
        "y": 80,
        "wires": [
            [
                "1161fa41.8d37a6"
            ]
        ]
    },
    {
        "id": "27fbffbb.53c6a",
        "type": "file in",
        "z": "5f562f66.a301e",
        "name": "",
        "filename": "bake-settings.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 350,
        "y": 700,
        "wires": [
            [
                "68d2db63.2ff144"
            ]
        ]
    },
    {
        "id": "68d2db63.2ff144",
        "type": "json",
        "z": "5f562f66.a301e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 510,
        "y": 700,
        "wires": [
            [
                "fa84e555.4dd318"
            ]
        ]
    },
    {
        "id": "fa84e555.4dd318",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Parse for MQTT",
        "func": "var settingsReadback = msg.payload;\nif (msg.topic == 'initSettingsReadback') settingsReadback['state'] = 0;\nflow.set('settingsReadback',msg.payload);\nvar echoSettingsReadback = {};\nfor (var key in settingsReadback)\n{\n    topic = flow.get('archiverTopic') + key + '/reading';\n    echoSettingsReadback[topic] = {type :\"scalar\",value: settingsReadback[key] };\n}\nreturn {topic:'echoSettingsReadback',payload:echoSettingsReadback};",
        "outputs": 1,
        "noerr": 0,
        "x": 860,
        "y": 700,
        "wires": [
            [
                "4a63b59d.e06dec"
            ]
        ]
    },
    {
        "id": "4a63b59d.e06dec",
        "type": "split",
        "z": "5f562f66.a301e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "topic",
        "x": 1050,
        "y": 700,
        "wires": [
            [
                "dd277d43.3e001"
            ]
        ]
    },
    {
        "id": "e4f45ed.cf233a",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "Get Init Settings",
        "topic": "initSettingsReadback",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "x": 160,
        "y": 700,
        "wires": [
            [
                "27fbffbb.53c6a"
            ]
        ]
    },
    {
        "id": "14d4dc24.b47e94",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "State Machine",
        "func": "if (msg.topic != 'clock')\n{\n    if (msg.topic == 'state')\n    {\n        context.set('state',msg.payload.state);\n        context.set('startStateTime', new Date().getTime());\n        context.set('startStateTemperature', flow.get('temperature'));\n    }\n    else\n    {\n        return null;\n    }\n    return null;\n}\nvar state = context.get('state');\nif (state == undefined) state = 0;\nvar settingsReadback = flow.get('settingsReadback');\nvar temperature = flow.get('temperature');\nvar targetTemperature = temperature;\nvar relayOn = 0;\nvar regLEDOn = context.get('regLEDOn');\nif (regLEDOn == undefined)\n{\n    regLEDOn = false;\n    context.set('regLEDOn', regLEDOn);\n}\nvar now = msg.payload;\nvar infoMsg = null;\nswitch(state) \n{\n  case 0:\n    // off\n    regLEDOn = false;\n    context.set('regLEDOn', regLEDOn);\n    relayOn = 0;\n    break;\n  case 1:\n    // ramp up\n    var deltaTime = (now - context.get('startStateTime')) / 3600.0 / 1000.0;\n    if (deltaTime > settingsReadback['ramp-up-time']) deltaTime = settingsReadback['ramp-up-time'];\n    targetTemperature = (settingsReadback['reg-temp'] - context.get('startStateTemperature')) ;\n    targetTemperature = targetTemperature * deltaTime / settingsReadback['ramp-up-time'];\n    targetTemperature = targetTemperature + context.get('startStateTemperature');\n    targetTemperature = Math.round(targetTemperature * 100.0) / 100.0;\n    if (temperature < (targetTemperature - settingsReadback['reg-window']))\n    {\n        relayOn = 1;\n    }\n    else\n    {\n        relayOn = 0\n    }\n    regLEDOn = !regLEDOn;\n    context.set('regLEDOn', regLEDOn);\n    break;\n  case 2:\n    // ramp down\n    deltaTime = (now - context.get('startStateTime')) / 3600.0 / 1000.0;\n    if (deltaTime > settingsReadback['ramp-down-time']) deltaTime = settingsReadback['ramp-down-time'];\n    targetTemperature = (20.0 - context.get('startStateTemperature')) ;\n    targetTemperature = targetTemperature * deltaTime / settingsReadback['ramp-down-time'];\n    targetTemperature = targetTemperature + context.get('startStateTemperature');\n    targetTemperature = Math.round(targetTemperature * 100.0) / 100.0;\n    if (temperature < (targetTemperature - settingsReadback['reg-window']))\n    {\n        relayOn = 1;\n    }\n    else\n    {\n        relayOn = 0\n    }\n    regLEDOn = !regLEDOn;\n    context.set('regLEDOn', regLEDOn);\n    break;\n  case 3:\n    // regulate\n    targetTemperature = Math.round(settingsReadback['reg-temp'] * 100.0) / 100.0;\n    if (temperature < (targetTemperature - settingsReadback['reg-window']))\n    {\n        relayOn = 1;\n    }\n    else\n    {\n        relayOn = 0\n    }\n    regLEDOn = true;\n    context.set('regLEDOn', regLEDOn);\n    break;\n  case 4:\n    // on\n    regLEDOn = false;\n    context.set('regLEDOn', regLEDOn);\n    relayOn = 1;\n    break;\n  default:\n    regLEDOn = false;\n    context.set('regLEDOn', regLEDOn);\n    relayOn = 0;\n}\nreturn [{topic:'relay',payload:relayOn}, {topic:'ramp-temp',payload:targetTemperature}, {topic:'regLED',payload:regLEDOn}, infoMsg];",
        "outputs": 4,
        "noerr": 0,
        "x": 420,
        "y": 380,
        "wires": [
            [
                "72d86190.ad104",
                "e17bc3ae.1cb01",
                "227bb58f.f9acca"
            ],
            [
                "227bb58f.f9acca"
            ],
            [
                "7994edba.fadd74"
            ],
            [
                "d50d60eb.b416f"
            ]
        ]
    },
    {
        "id": "f12be87.9139b18",
        "type": "inject",
        "z": "5f562f66.a301e",
        "name": "",
        "topic": "clock",
        "payload": "",
        "payloadType": "date",
        "repeat": "0.5",
        "crontab": "",
        "once": true,
        "onceDelay": "7",
        "x": 170,
        "y": 380,
        "wires": [
            [
                "14d4dc24.b47e94"
            ]
        ]
    },
    {
        "id": "88c01f8f.803a3",
        "type": "function",
        "z": "5f562f66.a301e",
        "name": "Parse MQTT",
        "func": "return {topic:flow.get('archiverTopic') + msg.topic + '/reading', payload:{\"type\":\"scalar\",\"value\":msg.payload}}",
        "outputs": 1,
        "noerr": 0,
        "x": 850,
        "y": 360,
        "wires": [
            [
                "dd277d43.3e001"
            ]
        ]
    },
    {
        "id": "d50d60eb.b416f",
        "type": "debug",
        "z": "5f562f66.a301e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 630,
        "y": 520,
        "wires": []
    },
    {
        "id": "227bb58f.f9acca",
        "type": "batch",
        "z": "5f562f66.a301e",
        "name": "",
        "mode": "count",
        "count": "2",
        "overlap": 0,
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [],
        "x": 630,
        "y": 360,
        "wires": [
            [
                "88c01f8f.803a3"
            ]
        ]
    },
    {
        "id": "7994edba.fadd74",
        "type": "rpi-gpio out",
        "z": "5f562f66.a301e",
        "name": "",
        "pin": "13",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 640,
        "y": 420,
        "wires": []
    }
]